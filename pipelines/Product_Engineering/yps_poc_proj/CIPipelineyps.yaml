pipeline:
  name: CI-Pipeline-yps
  identifier: CIPipelineyps
  projectIdentifier: yps_poc_proj
  orgIdentifier: Product_Engineering
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: CIDemoGithubPersonal
        repoName: goHelloWorldServer
        build: <+input>
  stages:
    - stage:
        name: Build Test and Push
        identifier: Build_Test_and_Push
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: cibuildcluster
              namespace: test-ns
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: Run
                  name: Run Unit Tests
                  identifier: Run_Unit_Tests
                  spec:
                    connectorRef: DKRhubpersonalyps
                    image: golang:1.17
                    shell: Sh
                    command: |-
                      go get gotest.tools/gotestsum
                      gotestsum --format=standard-verbose --junitfile unit-tests.xml || true
                      CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -tags netgo
                    reports:
                      type: JUnit
                      spec:
                        paths:
                          - "*.xml"
              - step:
                  type: BuildAndPushDockerRegistry
                  name: Build and push to Docker
                  identifier: Build_and_push_to_Docker
                  spec:
                    connectorRef: DKRhubpersonalyps
                    repo: yashpalsingh3737/ci_tutorial_repo
                    tags:
                      - PROD-<+pipeline.sequenceId>_qa_validated
          slsa_provenance:
            enabled: false
    - stage:
        name: Run integration test
        identifier: Run_integration_test
        description: ""
        type: CI
        spec:
          cloneCodebase: false
          infrastructure:
            useFromStage: Build_Test_and_Push
          execution:
            steps:
              - step:
                  type: Background
                  name: Background Step
                  identifier: Background_Step
                  spec:
                    connectorRef: DKRhubpersonalyps
                    image: yashpalsingh3737/ci_tutorial_repo:PROD-<+pipeline.sequenceId>_qa_validated
                    shell: Sh
              - step:
                  type: Run
                  name: Test server connection
                  identifier: Test_server_connection
                  spec:
                    connectorRef: DKRhubpersonalyps
                    image: curlimages/curl:7.73.0
                    shell: Sh
                    command: |-
                      sleep 10
                      curl localhost:8080
                      curl localhost:8080?Hello!_I_am_a_nice_demo!
    - stage:
        name: test_image
        identifier: test_image
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: test_service
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  artifacts:
                    primary:
                      primaryArtifactRef: <+input>
                      sources: <+input>
          environment:
            environmentRef: harnessdeven
            deployToAll: false
            infrastructureDefinitions:
              - identifier: harness_k8sinfra
          execution:
            steps:
              - step:
                  type: Container
                  name: Test container
                  identifier: Test_container
                  spec:
                    connectorRef: DKRhubpersonalyps
                    image: yashpalsingh3737/ci_tutorial_repo:<+pipeline.sequenceId>
                    command: echo "Hello <+pipeline.sequenceId>"
                    shell: Sh
                    infrastructure:
                      type: KubernetesDirect
                      spec:
                        connectorRef: cdclusterpersonal
                        namespace: test-ns
                        resources:
                          limits:
                            cpu: "0.5"
                            memory: 500Mi
                        annotations: {}
                        labels: {}
                        containerSecurityContext:
                          capabilities:
                            drop: []
                            add: []
                        nodeSelector: {}
                    reports:
                      type: JUnit
                      spec:
                        paths: []
                    outputVariables: []
                    envVariables: {}
                  timeout: 10m
              - step:
                  type: Email
                  name: Email_1
                  identifier: Email_1
                  spec:
                    to: yash.singh@harness.io
                    cc: ""
                    subject: "Pipeline_name: <+pipeline.name> and Status: <+pipeline.status>"
                    body: <+account.name> \n <+org.identifier> \t\t <+org.name>
                  timeout: 10m
            rollbackSteps:
              - step:
                  type: K8sRollingRollback
                  name: K8sRollingRollback_1
                  identifier: K8sRollingRollback_1
                  spec:
                    pruningEnabled: false
                  timeout: 10m
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: Abort
        when:
          pipelineStatus: Success
          condition: "false"
